/*
 * generated by Xtext 2.12.0
 */
package co7217.miniproject2.ide.contentassist.antlr;

import co7217.miniproject2.ide.contentassist.antlr.internal.InternalGraphQLParser;
import co7217.miniproject2.services.GraphQLGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GraphQLParser extends AbstractContentAssistParser {

	@Inject
	private GraphQLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGraphQLParser createParser() {
		InternalGraphQLParser result = new InternalGraphQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getQueryFieldAccess().getGroup(), "rule__QueryField__Group__0");
					put(grammarAccess.getQueryFieldAccess().getGroup_1(), "rule__QueryField__Group_1__0");
					put(grammarAccess.getTypoAccess().getGroup(), "rule__Typo__Group__0");
					put(grammarAccess.getFeatureAccess().getGroup_0(), "rule__Feature__Group_0__0");
					put(grammarAccess.getFeatureAccess().getGroup_1(), "rule__Feature__Group_1__0");
					put(grammarAccess.getScalarAccess().getGroup(), "rule__Scalar__Group__0");
					put(grammarAccess.getGraphQLAccess().getElementsAssignment(), "rule__GraphQL__ElementsAssignment");
					put(grammarAccess.getQueryAccess().getNameAssignment_1(), "rule__Query__NameAssignment_1");
					put(grammarAccess.getQueryAccess().getQueryFieldAssignment_5(), "rule__Query__QueryFieldAssignment_5");
					put(grammarAccess.getQueryFieldAccess().getNameAssignment_0(), "rule__QueryField__NameAssignment_0");
					put(grammarAccess.getQueryFieldAccess().getNestedQueryAssignment_1_1(), "rule__QueryField__NestedQueryAssignment_1_1");
					put(grammarAccess.getTypoAccess().getNameAssignment_1(), "rule__Typo__NameAssignment_1");
					put(grammarAccess.getTypoAccess().getFeaturesAssignment_3(), "rule__Typo__FeaturesAssignment_3");
					put(grammarAccess.getFeatureAccess().getNameAssignment_0_0(), "rule__Feature__NameAssignment_0_0");
					put(grammarAccess.getFeatureAccess().getTypeAssignment_0_2(), "rule__Feature__TypeAssignment_0_2");
					put(grammarAccess.getFeatureAccess().getNameAssignment_1_0(), "rule__Feature__NameAssignment_1_0");
					put(grammarAccess.getFeatureAccess().getTypeAssignment_1_3(), "rule__Feature__TypeAssignment_1_3");
					put(grammarAccess.getScalarAccess().getNameAssignment_1(), "rule__Scalar__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GraphQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GraphQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

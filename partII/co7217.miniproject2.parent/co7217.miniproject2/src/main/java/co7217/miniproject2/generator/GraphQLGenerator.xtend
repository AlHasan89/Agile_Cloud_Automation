/*
 * generated by Xtext 2.12.0
 */
package co7217.miniproject2.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import co7217.miniproject2.graphQL.Query
import co7217.miniproject2.graphQL.QueryField

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GraphQLGenerator extends AbstractGenerator {

	 def compile(Query q) '''
	 	 	import com.gmongo.GMongo
	 	 	import com.mongodb.DBCursor
	 	 	import com.mongodb.MongoURI
	 	 	
	 	 	import miniproject2.mongoDb.Credentials
	 	 	
	 	 	// EDIT THE FOLLOWING PARAMETERS
	 	 	def USERNAME = Credentials.USERNAME
	 	 	def PWD = Credentials.PWD
	 	 	def HOST = Credentials.HOST
	 	 	def PORT = Credentials.PORT
	 	 	def DATABASE = Credentials.DATABASE
	 	 	
	 	 	
	 	 	// MAKING THE CONNECTION
	 	 	def connectionString = new MongoURI("mongodb://${USERNAME}:${PWD}@${HOST}:${PORT}/${DATABASE}")
	 	 	def mongo = new GMongo(connectionString)
	 	 	
	 	 	def db = mongo.getDB(DATABASE)
	 	 	
	 	 	def followers = db.followers.find()
	 	 	def result = '['
	 	 	«FOR qf : q.queryField»
	 	 		«FOR qq : qf.nestedQuery»
	 	 			«IF (qq.nestedQuery.empty == false)»
				 	 	«FOR qt : qq.nestedQuery»
				 	 		«IF (qf.nestedQuery.empty == false) && (qq.nestedQuery.empty == false) && (qt.nestedQuery.empty == false)»
					 	 				«qf.compileTweetHashTags»
					 	 	«ELSE»
					 	 				«qf.compile»
					 	 	«ENDIF»
				 	 	«ENDFOR»
				 	 «ELSE»
				 	 	«qf.compile»
				 	 «ENDIF»
			 	«ENDFOR»
		 	 «ENDFOR»
		 	 	
	 	 	result = result - ~/,$/
	 	 	result += ']'
	 	 	println result 
	 	 '''
	 
	 def compileTweetHashTags(QueryField qf) '''
	 followers.each{
	 	
	 	def result2 = ''
	 	if ((it.containsKey("«qf.name»")) && (it.«qf.name»)) {
	 		it.«qf.name».each{
	 		def result3 = ''	
			«FOR qq : qf.nestedQuery»
			if ((it.containsKey("«qq.name»")) && (it.«qq.name»)) {
				result3 = ''		
				
				«IF qq.nestedQuery.empty == false»	
			 		«FOR qt : qq.nestedQuery»
			 		if ((it.«qq.name».containsKey("«qt.name»")) && (it.«qq.name».«qt.name»)) {
			 			result3 += """
			 			 \"«qt.name»\": [
			 			"""
			 				def result4 = ''
			 				it.«qq.name».«qt.name».each{
			 					«IF qt.nestedQuery !== null»
			 					result4 = ''	
			 						«FOR qn : qt.nestedQuery»
			 						if (it.containsKey("«qn.name»") && (it.«qn.name»)) {
			 							result4 += """${groovy.json.JsonOutput.toJson(it.«qn.name»)}"""
			 								if (result4 != '') {
			 									result3 += """
				 						        {
				 						          \"«qn.name»\": $result4
				 						        },"""
			 								}
			 						}
			 						«ENDFOR»
			 					«ENDIF»
			 				}
			 			result3 = result3 - ~/,$/
			 			result3 += """
			 			]"""		 
					 	
					 	if (result3 != '') {
					 		result2 += """
					 	    {
					 	      \"«qq.name»\": {
					 	        $result3
					 	      }
					 	    },"""
					 	}			
					}
			 		«ENDFOR»
			 	«ENDIF»
			 	}
			 }
			«ENDFOR»
		}
		result2 = result2 - ~/,$/
		
			if (result2 != '') {
				result += """
		{
		  \"«qf.name»\": [
			$result2
		  ]
		},"""
			}
		}
	 '''
	 
	 def compile(QueryField qf) '''
	 	followers.each{
	 		def result2 = ''
	 		if ((it.containsKey("«qf.name»")) && (it.«qf.name»)) {
	 			def result3 = ''
	 			def result4 = ''
	 			def result5 = ''
	 			it.«qf.name».each{
	 				result2 += """
	 	 				 {"""
	 	 				 «FOR qq : qf.nestedQuery»
	 							«IF qq.nestedQuery.empty == true»
	 							result3 = ''
	 							if (it.containsKey("«qq.name»") && (it.«qq.name»)) {
	 								result3 += """${groovy.json.JsonOutput.toJson(it.«qq.name»)}"""
	 								if (result3 != '') {
	 									result2 += """
	 	    								\"«qq.name»\": $result3,"""
	 								}
	 							}
	 							«ENDIF»
		 						
		 						«IF qq.nestedQuery.empty == false»	
								result4 = ''
								if ((it.containsKey("«qq.name»")) && (it.«qq.name»)) {
									«FOR qt : qq.nestedQuery»
									if (it.user.containsKey("«qt.name»") && (it.«qq.name».«qt.name»)) {
										result4 += """${groovy.json.JsonOutput.toJson(it.«qq.name».«qt.name»)}"""
											if (result4 != '') {
												result2 += """
								    				\"«qq.name»\" : {
								      			\"«qt.name»\": $result4
								   				 }"""
											}
									}
									«ENDFOR»
								}
							 	«ENDIF»
				«ENDFOR»
				result2 += """
				  },"""
						}
					}
					
					if (result2 != '') {
						result2 = result2 - ~/,$/
						result += """
				{
				  \"«qf.name»\" : [ 
					$result2
				  ]
				},"""
					}
				}
			
	 '''
	 
	 
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		var x = input.URI.toString
		x = x.replaceAll(".graphql","")
		 	for (m : input.allContents.toIterable.filter(Query)) {
		         fsa.generateFile(
		             x+".groovy",
		             m.compile)
		     }
 	}
 	
 	
}



/**
 * generated by Xtext 2.12.0
 */
package co7217.miniproject2.generator;

import co7217.miniproject2.graphQL.Query;
import co7217.miniproject2.graphQL.QueryField;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GraphQLGenerator extends AbstractGenerator {
  public CharSequence compile(final Query q) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import com.gmongo.GMongo");
    _builder.newLine();
    _builder.append("import com.mongodb.DBCursor");
    _builder.newLine();
    _builder.append("import com.mongodb.MongoURI");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import miniproject2.mongoDb.Credentials");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// EDIT THE FOLLOWING PARAMETERS");
    _builder.newLine();
    _builder.append("def USERNAME = Credentials.USERNAME");
    _builder.newLine();
    _builder.append("def PWD = Credentials.PWD");
    _builder.newLine();
    _builder.append("def HOST = Credentials.HOST");
    _builder.newLine();
    _builder.append("def PORT = Credentials.PORT");
    _builder.newLine();
    _builder.append("def DATABASE = Credentials.DATABASE");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("// MAKING THE CONNECTION");
    _builder.newLine();
    _builder.append("def connectionString = new MongoURI(\"mongodb://${USERNAME}:${PWD}@${HOST}:${PORT}/${DATABASE}\")");
    _builder.newLine();
    _builder.append("def mongo = new GMongo(connectionString)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def db = mongo.getDB(DATABASE)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def followers = db.followers.find()");
    _builder.newLine();
    _builder.append("def result = \'[\'");
    _builder.newLine();
    {
      EList<QueryField> _queryField = q.getQueryField();
      for(final QueryField qf : _queryField) {
        {
          EList<QueryField> _nestedQuery = qf.getNestedQuery();
          for(final QueryField qq : _nestedQuery) {
            {
              boolean _isEmpty = qq.getNestedQuery().isEmpty();
              boolean _equals = (_isEmpty == false);
              if (_equals) {
                {
                  EList<QueryField> _nestedQuery_1 = qq.getNestedQuery();
                  for(final QueryField qt : _nestedQuery_1) {
                    {
                      if ((((qf.getNestedQuery().isEmpty() == false) && (qq.getNestedQuery().isEmpty() == false)) && (qt.getNestedQuery().isEmpty() == false))) {
                        CharSequence _compileTweetHashTags = this.compileTweetHashTags(qf);
                        _builder.append(_compileTweetHashTags);
                        _builder.newLineIfNotEmpty();
                      } else {
                        CharSequence _compile = this.compile(qf);
                        _builder.append(_compile);
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              } else {
                CharSequence _compile_1 = this.compile(qf);
                _builder.append(_compile_1);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t\t \t \t");
    _builder.newLine();
    _builder.append("result = result - ~/,$/");
    _builder.newLine();
    _builder.append("result += \']\'");
    _builder.newLine();
    _builder.append("println result ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTweetHashTags(final QueryField qf) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("followers.each{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def result2 = \'\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ((it.containsKey(\"");
    String _name = qf.getName();
    _builder.append(_name, "\t");
    _builder.append("\")) && (it.");
    String _name_1 = qf.getName();
    _builder.append(_name_1, "\t");
    _builder.append(")) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("it.");
    String _name_2 = qf.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append(".each{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("def result3 = \'\'\t");
    _builder.newLine();
    {
      EList<QueryField> _nestedQuery = qf.getNestedQuery();
      for(final QueryField qq : _nestedQuery) {
        _builder.append("\t\t\t");
        _builder.append("if ((it.containsKey(\"");
        String _name_3 = qq.getName();
        _builder.append(_name_3, "\t\t\t");
        _builder.append("\")) && (it.");
        String _name_4 = qq.getName();
        _builder.append(_name_4, "\t\t\t");
        _builder.append(")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("result3 = \'\'\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.newLine();
        {
          boolean _isEmpty = qq.getNestedQuery().isEmpty();
          boolean _equals = (_isEmpty == false);
          if (_equals) {
            {
              EList<QueryField> _nestedQuery_1 = qq.getNestedQuery();
              for(final QueryField qt : _nestedQuery_1) {
                _builder.append("if ((it.");
                String _name_5 = qq.getName();
                _builder.append(_name_5);
                _builder.append(".containsKey(\"");
                String _name_6 = qt.getName();
                _builder.append(_name_6);
                _builder.append("\")) && (it.");
                String _name_7 = qq.getName();
                _builder.append(_name_7);
                _builder.append(".");
                String _name_8 = qt.getName();
                _builder.append(_name_8);
                _builder.append(")) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("result3 += \"\"\"");
                _builder.newLine();
                _builder.append("\t ");
                _builder.append("\\\"");
                String _name_9 = qt.getName();
                _builder.append(_name_9, "\t ");
                _builder.append("\\\": [");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\"\"\"");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("def result4 = \'\'");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("it.");
                String _name_10 = qq.getName();
                _builder.append(_name_10, "\t\t");
                _builder.append(".");
                String _name_11 = qt.getName();
                _builder.append(_name_11, "\t\t");
                _builder.append(".each{");
                _builder.newLineIfNotEmpty();
                {
                  EList<QueryField> _nestedQuery_2 = qt.getNestedQuery();
                  boolean _tripleNotEquals = (_nestedQuery_2 != null);
                  if (_tripleNotEquals) {
                    _builder.append("\t\t\t");
                    _builder.append("result4 = \'\'\t");
                    _builder.newLine();
                    {
                      EList<QueryField> _nestedQuery_3 = qt.getNestedQuery();
                      for(final QueryField qn : _nestedQuery_3) {
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("if (it.containsKey(\"");
                        String _name_12 = qn.getName();
                        _builder.append(_name_12, "\t\t\t\t");
                        _builder.append("\") && (it.");
                        String _name_13 = qn.getName();
                        _builder.append(_name_13, "\t\t\t\t");
                        _builder.append(")) {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("result4 += \"\"\"${groovy.json.JsonOutput.toJson(it.");
                        String _name_14 = qn.getName();
                        _builder.append(_name_14, "\t\t\t\t\t");
                        _builder.append(")}\"\"\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("if (result4 != \'\') {");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t\t");
                        _builder.append("result3 += \"\"\"");
                        _builder.newLine();
                        _builder.append("\t\t\t\t \t\t\t\t\t\t        ");
                        _builder.append("{");
                        _builder.newLine();
                        _builder.append("\t\t\t\t \t\t\t\t\t\t          ");
                        _builder.append("\\\"");
                        String _name_15 = qn.getName();
                        _builder.append(_name_15, "\t\t\t\t \t\t\t\t\t\t          ");
                        _builder.append("\\\": $result4");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t\t \t\t\t\t\t\t        ");
                        _builder.append("},\"\"\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("result3 = result3 - ~/,$/");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("result3 += \"\"\"");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("]\"\"\"\t\t ");
                _builder.newLine();
                _builder.append("\t\t\t\t\t \t");
                _builder.newLine();
                _builder.append("\t\t\t\t\t \t");
                _builder.append("if (result3 != \'\') {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t \t\t");
                _builder.append("result2 += \"\"\"");
                _builder.newLine();
                _builder.append("\t\t\t\t\t \t    ");
                _builder.append("{");
                _builder.newLine();
                _builder.append("\t\t\t\t\t \t      ");
                _builder.append("\\\"");
                String _name_16 = qq.getName();
                _builder.append(_name_16, "\t\t\t\t\t \t      ");
                _builder.append("\\\": {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t \t        ");
                _builder.append("$result3");
                _builder.newLine();
                _builder.append("\t\t\t\t\t \t      ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t\t\t \t    ");
                _builder.append("},\"\"\"");
                _builder.newLine();
                _builder.append("\t\t\t\t\t \t");
                _builder.append("}\t\t\t");
                _builder.newLine();
                _builder.append("\t\t\t\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t\t\t");
        _builder.append(" \t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append(" ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("result2 = result2 - ~/,$/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (result2 != \'\') {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("result += \"\"\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("\\\"");
    String _name_17 = qf.getName();
    _builder.append(_name_17, "\t\t  ");
    _builder.append("\\\": [");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("$result2");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("},\"\"\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final QueryField qf) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("followers.each{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def result2 = \'\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ((it.containsKey(\"");
    String _name = qf.getName();
    _builder.append(_name, "\t");
    _builder.append("\")) && (it.");
    String _name_1 = qf.getName();
    _builder.append(_name_1, "\t");
    _builder.append(")) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("def result3 = \'\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("def result4 = \'\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("def result5 = \'\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("it.");
    String _name_2 = qf.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append(".each{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("result2 += \"\"\"");
    _builder.newLine();
    _builder.append(" \t\t\t\t ");
    _builder.append("{\"\"\"");
    _builder.newLine();
    {
      EList<QueryField> _nestedQuery = qf.getNestedQuery();
      for(final QueryField qq : _nestedQuery) {
        {
          boolean _isEmpty = qq.getNestedQuery().isEmpty();
          boolean _equals = (_isEmpty == true);
          if (_equals) {
            _builder.append("result3 = \'\'");
            _builder.newLine();
            _builder.append("if (it.containsKey(\"");
            String _name_3 = qq.getName();
            _builder.append(_name_3);
            _builder.append("\") && (it.");
            String _name_4 = qq.getName();
            _builder.append(_name_4);
            _builder.append(")) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("result3 += \"\"\"${groovy.json.JsonOutput.toJson(it.");
            String _name_5 = qq.getName();
            _builder.append(_name_5, "\t");
            _builder.append(")}\"\"\"");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("if (result3 != \'\') {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("result2 += \"\"\"");
            _builder.newLine();
            _builder.append("\t \t    \t\t\t\t\t\t\t\t");
            _builder.append("\\\"");
            String _name_6 = qq.getName();
            _builder.append(_name_6, "\t \t    \t\t\t\t\t\t\t\t");
            _builder.append("\\\": $result3,\"\"\"");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t\t \t\t\t\t\t\t");
        _builder.newLine();
        {
          boolean _isEmpty_1 = qq.getNestedQuery().isEmpty();
          boolean _equals_1 = (_isEmpty_1 == false);
          if (_equals_1) {
            _builder.append("result4 = \'\'");
            _builder.newLine();
            _builder.append("if ((it.containsKey(\"");
            String _name_7 = qq.getName();
            _builder.append(_name_7);
            _builder.append("\")) && (it.");
            String _name_8 = qq.getName();
            _builder.append(_name_8);
            _builder.append(")) {");
            _builder.newLineIfNotEmpty();
            {
              EList<QueryField> _nestedQuery_1 = qq.getNestedQuery();
              for(final QueryField qt : _nestedQuery_1) {
                _builder.append("\t");
                _builder.append("if (it.user.containsKey(\"");
                String _name_9 = qt.getName();
                _builder.append(_name_9, "\t");
                _builder.append("\") && (it.");
                String _name_10 = qq.getName();
                _builder.append(_name_10, "\t");
                _builder.append(".");
                String _name_11 = qt.getName();
                _builder.append(_name_11, "\t");
                _builder.append(")) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("result4 += \"\"\"${groovy.json.JsonOutput.toJson(it.");
                String _name_12 = qq.getName();
                _builder.append(_name_12, "\t\t");
                _builder.append(".");
                String _name_13 = qt.getName();
                _builder.append(_name_13, "\t\t");
                _builder.append(")}\"\"\"");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("if (result4 != \'\') {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("result2 += \"\"\"");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t\t    \t\t\t\t");
                _builder.append("\\\"");
                String _name_14 = qq.getName();
                _builder.append(_name_14, "\t\t\t\t\t\t\t\t    \t\t\t\t");
                _builder.append("\\\" : {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t\t\t      \t\t\t");
                _builder.append("\\\"");
                String _name_15 = qt.getName();
                _builder.append(_name_15, "\t\t\t\t\t\t\t\t      \t\t\t");
                _builder.append("\\\": $result4");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t\t\t   \t\t\t\t ");
                _builder.append("}\"\"\"");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("result2 += \"\"\"");
    _builder.newLine();
    _builder.append("\t\t\t\t  ");
    _builder.append("},\"\"\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (result2 != \'\') {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("result2 = result2 - ~/,$/");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("result += \"\"\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t  ");
    _builder.append("\\\"");
    String _name_16 = qf.getName();
    _builder.append(_name_16, "\t\t\t\t  ");
    _builder.append("\\\" : [ ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("$result2");
    _builder.newLine();
    _builder.append("\t\t\t\t  ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("},\"\"\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String x = input.getURI().toString();
    x = x.replaceAll(".graphql", "");
    Iterable<Query> _filter = Iterables.<Query>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), Query.class);
    for (final Query m : _filter) {
      fsa.generateFile(
        (x + ".groovy"), 
        this.compile(m));
    }
  }
}

/**
 * generated by Xtext 2.12.0
 */
package co7217.miniproject2.graphQL.impl;

import co7217.miniproject2.graphQL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GraphQLFactoryImpl extends EFactoryImpl implements GraphQLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GraphQLFactory init()
  {
    try
    {
      GraphQLFactory theGraphQLFactory = (GraphQLFactory)EPackage.Registry.INSTANCE.getEFactory(GraphQLPackage.eNS_URI);
      if (theGraphQLFactory != null)
      {
        return theGraphQLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GraphQLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphQLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GraphQLPackage.GRAPH_QL: return createGraphQL();
      case GraphQLPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case GraphQLPackage.QUERY: return createQuery();
      case GraphQLPackage.QUERY_FIELD: return createQueryField();
      case GraphQLPackage.TYPE: return createType();
      case GraphQLPackage.TYPO: return createTypo();
      case GraphQLPackage.FEATURE: return createFeature();
      case GraphQLPackage.SCALAR: return createScalar();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphQL createGraphQL()
  {
    GraphQLImpl graphQL = new GraphQLImpl();
    return graphQL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Query createQuery()
  {
    QueryImpl query = new QueryImpl();
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryField createQueryField()
  {
    QueryFieldImpl queryField = new QueryFieldImpl();
    return queryField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Typo createTypo()
  {
    TypoImpl typo = new TypoImpl();
    return typo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Scalar createScalar()
  {
    ScalarImpl scalar = new ScalarImpl();
    return scalar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphQLPackage getGraphQLPackage()
  {
    return (GraphQLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GraphQLPackage getPackage()
  {
    return GraphQLPackage.eINSTANCE;
  }

} //GraphQLFactoryImpl

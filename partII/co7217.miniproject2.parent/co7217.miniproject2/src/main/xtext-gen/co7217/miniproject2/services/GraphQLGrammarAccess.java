/*
 * generated by Xtext 2.12.0
 */
package co7217.miniproject2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GraphQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GraphQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.miniproject2.GraphQL.GraphQL");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//GraphQL:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.miniproject2.GraphQL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	Type | Query;
		@Override public ParserRule getRule() { return rule; }
		
		//Type | Query
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//Query
		public RuleCall getQueryParserRuleCall_1() { return cQueryParserRuleCall_1; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.miniproject2.GraphQL.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cQueryFieldAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cQueryFieldQueryFieldParserRuleCall_5_0 = (RuleCall)cQueryFieldAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Query:
		//	'query' name=ID '(' ')' '{'
		//	queryField+=QueryField+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'query' name=ID '(' ')' '{' queryField+=QueryField+ '}'
		public Group getGroup() { return cGroup; }
		
		//'query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//queryField+=QueryField+
		public Assignment getQueryFieldAssignment_5() { return cQueryFieldAssignment_5; }
		
		//QueryField
		public RuleCall getQueryFieldQueryFieldParserRuleCall_5_0() { return cQueryFieldQueryFieldParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QueryFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.miniproject2.GraphQL.QueryField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNestedQueryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNestedQueryQueryFieldParserRuleCall_1_1_0 = (RuleCall)cNestedQueryAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//QueryField:
		//	name=ID ('{' nestedQuery+=QueryField+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('{' nestedQuery+=QueryField+ '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('{' nestedQuery+=QueryField+ '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//nestedQuery+=QueryField+
		public Assignment getNestedQueryAssignment_1_1() { return cNestedQueryAssignment_1_1; }
		
		//QueryField
		public RuleCall getNestedQueryQueryFieldParserRuleCall_1_1_0() { return cNestedQueryQueryFieldParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.miniproject2.GraphQL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Scalar | Typo;
		@Override public ParserRule getRule() { return rule; }
		
		//Scalar | Typo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Scalar
		public RuleCall getScalarParserRuleCall_0() { return cScalarParserRuleCall_0; }
		
		//Typo
		public RuleCall getTypoParserRuleCall_1() { return cTypoParserRuleCall_1; }
	}
	public class TypoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.miniproject2.GraphQL.Typo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Typo:
		//	'type' name=ID '{' features+=Feature+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID '{' features+=Feature+ '}'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=Feature+
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_3_0() { return cFeaturesFeatureParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.miniproject2.GraphQL.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_0_2_0 = (CrossReference)cTypeAssignment_0_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_2_0_1 = (RuleCall)cTypeTypeCrossReference_0_2_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_3_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cExclamationMarkKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//Feature:
		//	name=ID ':' type=[Type] '!'? | name=ID ':' '[' type=[Type] '!'? ']' '!'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[Type] '!'? | name=ID ':' '[' type=[Type] '!'? ']' '!'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID ':' type=[Type] '!'?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//type=[Type]
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_0_2_0() { return cTypeTypeCrossReference_0_2_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_2_0_1() { return cTypeTypeIDTerminalRuleCall_0_2_0_1; }
		
		//'!'?
		public Keyword getExclamationMarkKeyword_0_3() { return cExclamationMarkKeyword_0_3; }
		
		//name=ID ':' '[' type=[Type] '!'? ']' '!'?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//type=[Type]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_1_3_0() { return cTypeTypeCrossReference_1_3_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_3_0_1() { return cTypeTypeIDTerminalRuleCall_1_3_0_1; }
		
		//'!'?
		public Keyword getExclamationMarkKeyword_1_4() { return cExclamationMarkKeyword_1_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
		
		//'!'?
		public Keyword getExclamationMarkKeyword_1_6() { return cExclamationMarkKeyword_1_6; }
	}
	public class ScalarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.miniproject2.GraphQL.Scalar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScalarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Scalar:
		//	'scalar' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'scalar' name=ID
		public Group getGroup() { return cGroup; }
		
		//'scalar'
		public Keyword getScalarKeyword_0() { return cScalarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final GraphQLElements pGraphQL;
	private final AbstractElementElements pAbstractElement;
	private final QueryElements pQuery;
	private final QueryFieldElements pQueryField;
	private final TypeElements pType;
	private final TypoElements pTypo;
	private final FeatureElements pFeature;
	private final ScalarElements pScalar;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GraphQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGraphQL = new GraphQLElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pQuery = new QueryElements();
		this.pQueryField = new QueryFieldElements();
		this.pType = new TypeElements();
		this.pTypo = new TypoElements();
		this.pFeature = new FeatureElements();
		this.pScalar = new ScalarElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co7217.miniproject2.GraphQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GraphQL:
	//	elements+=AbstractElement*;
	public GraphQLElements getGraphQLAccess() {
		return pGraphQL;
	}
	
	public ParserRule getGraphQLRule() {
		return getGraphQLAccess().getRule();
	}
	
	//AbstractElement:
	//	Type | Query;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Query:
	//	'query' name=ID '(' ')' '{'
	//	queryField+=QueryField+
	//	'}';
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//QueryField:
	//	name=ID ('{' nestedQuery+=QueryField+ '}')?;
	public QueryFieldElements getQueryFieldAccess() {
		return pQueryField;
	}
	
	public ParserRule getQueryFieldRule() {
		return getQueryFieldAccess().getRule();
	}
	
	//Type:
	//	Scalar | Typo;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Typo:
	//	'type' name=ID '{' features+=Feature+ '}';
	public TypoElements getTypoAccess() {
		return pTypo;
	}
	
	public ParserRule getTypoRule() {
		return getTypoAccess().getRule();
	}
	
	//Feature:
	//	name=ID ':' type=[Type] '!'? | name=ID ':' '[' type=[Type] '!'? ']' '!'?;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Scalar:
	//	'scalar' name=ID;
	public ScalarElements getScalarAccess() {
		return pScalar;
	}
	
	public ParserRule getScalarRule() {
		return getScalarAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
